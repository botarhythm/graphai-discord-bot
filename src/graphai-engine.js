/**
 * GraphAI„Ç®„É≥„Ç∏„É≥ÂàùÊúüÂåñ
 */

// Node.js v18Êú™Ê∫Ä„Åß„ÇÇÂãï‰Ωú„Åô„Çã„Çà„ÅÜ„Å´Blob„ÅÆpolyfill„Çí„Ç∞„É≠„Éº„Éê„É´„Å´ËøΩÂä†
const CrossBlob = require('cross-blob');
global.Blob = CrossBlob;

// GraphAI„ÅÆ‰ª£„Çè„Çä„Å´Gemini„Å†„Åë„Çí‰ΩøÁî®„Åô„Çã„Ç∑„É≥„Éó„É´„Å™„Ç®„É≥„Ç∏„É≥
const { GoogleGenerativeAI } = require('@google/generative-ai');
const config = require('./config');
const fs = require('fs');
const path = require('path');

// Gemini AI„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ
const genAI = new GoogleGenerativeAI(config.gemini.apiKey);
const model = genAI.getGenerativeModel({ model: config.gemini.model });

// „Ç∑„É≥„Éó„É´„Å™„Ç®„É≥„Ç∏„É≥„ÅÆ‰ΩúÊàê
const engine = {
  // ‰ºöË©±Â±•Ê≠¥„ÅÆ‰øùÂ≠òÂÖà
  HISTORY_DIR: path.join(__dirname, '../data/conversations'),
  
  // ‰ºöË©±Â±•Ê≠¥„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
  getConversationHistory(userId) {
    if (!fs.existsSync(this.HISTORY_DIR)) {
      fs.mkdirSync(this.HISTORY_DIR, { recursive: true });
    }
    
    const filePath = path.join(this.HISTORY_DIR, `${userId}.json`);
    
    if (!fs.existsSync(filePath)) {
      return [];
    }
    
    try {
      return JSON.parse(fs.readFileSync(filePath, 'utf8'));
    } catch (error) {
      console.error('History file read error:', error);
      return [];
    }
  },
  
  // ‰ºöË©±Â±•Ê≠¥„Çí‰øùÂ≠ò„Åô„ÇãÈñ¢Êï∞
  saveConversationHistory(userId, history) {
    if (!fs.existsSync(this.HISTORY_DIR)) {
      fs.mkdirSync(this.HISTORY_DIR, { recursive: true });
    }
    
    const filePath = path.join(this.HISTORY_DIR, `${userId}.json`);
    
    try {
      // ÊúÄÊñ∞„ÅÆ10‰ª∂„ÅÆ„Åø‰øùÂ≠òÔºà„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆÂà∂Èôê„ÅÆ„Åü„ÇÅÔºâ
      const recentHistory = history.slice(-10);
      fs.writeFileSync(filePath, JSON.stringify(recentHistory, null, 2), 'utf8');
    } catch (error) {
      console.error('History file write error:', error);
    }
  },
  
  // ‰ºöË©±Â±•Ê≠¥„Çí„ÇØ„É™„Ç¢„Åô„ÇãÈñ¢Êï∞
  clearConversationHistory(userId) {
    const filePath = path.join(this.HISTORY_DIR, `${userId}.json`);
    
    try {
      fs.writeFileSync(filePath, JSON.stringify([]), 'utf8');
      return true;
    } catch (error) {
      console.error('History clear error:', error);
      return false;
    }
  },
  
  // „ÉÜ„Ç≠„Çπ„ÉàÂá¶ÁêÜ„ÇíË°å„ÅÜÈñ¢Êï∞
  async processText(input) {
    const { query, userId, username = '„É¶„Éº„Ç∂„Éº' } = input;
    
    // ‰ºöË©±Â±•Ê≠¥„ÅÆÂèñÂæó
    let history = this.getConversationHistory(userId);
    
    try {
      // Êñ∞„Åó„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂ±•Ê≠¥„Å´ËøΩÂä†
      history.push({
        role: 'user',
        content: query,
        timestamp: new Date().toISOString()
      });
      
      // „Ç∑„Çπ„ÉÜ„É†„Éó„É≠„É≥„Éó„Éà
      const SYSTEM_PROMPT = `„ÅÇ„Å™„Åü„ÅØ„Äå„Éú„ÉÉ„ÉÅ„Éº„Äç„Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆDiscord‰∏ä„ÅßÂãï‰Ωú„Åô„ÇãAI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇ
‰ª•‰∏ã„ÅÆÁâπÂæ¥„Å®Âà∂Á¥Ñ„ÇíÊåÅ„Å£„Å¶„ÅÑ„Åæ„ÅôÔºö

- Ë¶™„Åó„Åø„ÇÑ„Åô„Åè„ÄÅ„Éï„É¨„É≥„Éâ„É™„Éº„Å™Èõ∞Âõ≤Ê∞ó„ÇíÊåÅ„Å°„ÄÅÊôÇ„ÄÖ„É¶„Éº„É¢„Ç¢„Çí‰∫§„Åà„Åü‰ºöË©±„Çí„Åó„Åæ„Åô
- Á∞°ÊΩî„ÅßÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑÊó•Êú¨Ë™û„ÅßÂõûÁ≠î„Åó„Åæ„Åô
- Â∞ÇÈñÄÁöÑ„Å™Ë©±È°å„Åß„ÇÇÁêÜËß£„Åó„ÇÑ„Åô„ÅÑË™¨Êòé„ÇíÂøÉ„Åå„Åë„Åæ„Åô
- Ë≥™Âïè„Å´ÂØæ„Åó„Å¶ÂÖ∑‰ΩìÁöÑ„Åã„Å§ÂΩπÁ´ã„Å§ÊÉÖÂ†±„ÇíÊèê‰æõ„Åó„Åæ„Åô
- „ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Å™Ë≥™Âïè„Å´„ÇÇÊüîËªü„Å´ÂØæÂøú„Åó„Åæ„Åô
- ‰∏çÈÅ©Âàá„Å™„É™„ÇØ„Ç®„Çπ„Éà„Å´„ÅØ‰∏ÅÂØß„Å´Êñ≠„Çä„Åæ„Åô

ÁèæÂú®„ÅÆÊó•‰ªò: ${new Date().toISOString().split('T')[0]}
`;
      
      // ‰ºöË©±„ÅÆÂàùÊúüÂåñ
      const chat = model.startChat({
        history: history.length > 1 ? history.slice(0, -1).map(msg => ({
          role: msg.role === 'user' ? 'user' : 'model',
          parts: [{ text: msg.content }]
        })) : [],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        },
        safetySettings: [
          {
            category: 'HARM_CATEGORY_HARASSMENT',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            category: 'HARM_CATEGORY_HATE_SPEECH',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          }
        ]
      });
      
      // „Éó„É≠„É≥„Éó„Éà„ÅÆÊ∫ñÂÇô
      let prompt = query;
      
      // „Ç∑„Çπ„ÉÜ„É†„Éó„É≠„É≥„Éó„Éà„ÇíÂàùÂõû„ÅÆ‰ºöË©±„ÅÆ„ÅøËøΩÂä†
      if (history.length <= 1) {
        prompt = `${SYSTEM_PROMPT}\n\n„É¶„Éº„Ç∂„Éº: ${query}`;
      }
      
      // „ÉÜ„Ç≠„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂá¶ÁêÜ
      const result = await chat.sendMessage(prompt);
      const response = await result.response;
      const text = response.text();
      
      // AI„ÅÆËøîÁ≠î„ÇíÂ±•Ê≠¥„Å´ËøΩÂä†
      history.push({
        role: 'assistant',
        content: text,
        timestamp: new Date().toISOString()
      });
      
      // ‰ºöË©±Â±•Ê≠¥„ÅÆ‰øùÂ≠ò
      this.saveConversationHistory(userId, history);
      
      return text;
    } catch (error) {
      console.error('Gemini API Error:', error);
      return `AI„É¢„Éá„É´„Å®„ÅÆÈÄö‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`;
    }
  },
  
  // „Éï„É≠„Éº„ÇíÂÆüË°å„Åô„ÇãÈñ¢Êï∞ÔºàGraphAI‰ª£Êõø„ÅÆÁ∞°ÊòìÂÆüË£ÖÔºâ
  async execute(flowName, inputs) {
    console.log(`Executing flow: ${flowName}`);
    
    if (flowName === 'main') {
      // „É¶„Éº„Ç∂„ÉºÂÖ•Âäõ„ÅÆÂá¶ÁêÜ
      if (inputs.discordInput) {
        const response = await this.processText({
          query: inputs.discordInput.content,
          userId: inputs.discordInput.authorId,
          username: inputs.discordInput.username
        });
        
        return {
          discordOutput: response
        };
      }
    }
    
    return {
      error: 'Invalid flow or inputs'
    };
  },
  
  // processÈñ¢Êï∞„ÅÆËøΩÂä†ÔºàTypeScript„Åã„Çâ„ÅÆ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅ„Å´Ôºâ
  async process(flowName, inputs) {
    console.log(`Processing flow: ${flowName}`);
    
    // „É°„ÉÉ„Çª„Éº„Ç∏„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÂΩ¢Âºè„ÇídiscordInput„Å´Â§âÊèõ
    if (inputs.message) {
      return await this.processText({
        query: inputs.message.content,
        userId: inputs.message.authorId,
        username: inputs.message.username
      });
    }
    
    // Êó¢Â≠ò„ÅÆexecute„É°„ÇΩ„ÉÉ„Éâ„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
    const result = await this.execute(flowName, inputs);
    
    // discordOutput„Éï„Ç£„Éº„É´„Éâ„Åå„ÅÇ„Çå„Å∞Ëøî„Åô
    if (result && result.discordOutput) {
      return result.discordOutput;
    }
    
    return result;
  }
};

console.log('üß† Simple Gemini Engine initialized successfully');

module.exports = engine;