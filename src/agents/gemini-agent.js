/**
 * Gemini API„Å®„ÅÆÈÄ£Êê∫„Ç®„Éº„Ç∏„Çß„É≥„Éà
 * Gemini 2.0 Flash API„Çí‰ΩøÁî®„Åó„Åü‰ºöË©±Âá¶ÁêÜ„ÇíË°å„ÅÑ„Åæ„Åô
 */

const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');
const config = require('../config');

// Gemini API„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ
const genAI = new GoogleGenerativeAI(config.gemini.apiKey);
const model = genAI.getGenerativeModel({ model: config.gemini.model });

// „Éó„É≠„É≥„Éó„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà
const SYSTEM_PROMPT = `„ÅÇ„Å™„Åü„ÅØ„Äå„Éú„ÉÉ„ÉÅ„Éº„Äç„Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆDiscord‰∏ä„ÅßÂãï‰Ωú„Åô„ÇãAI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇ
‰ª•‰∏ã„ÅÆÁâπÂæ¥„Å®Âà∂Á¥Ñ„ÇíÊåÅ„Å£„Å¶„ÅÑ„Åæ„ÅôÔºö

- Ë¶™„Åó„Åø„ÇÑ„Åô„Åè„ÄÅ„Éï„É¨„É≥„Éâ„É™„Éº„Å™Èõ∞Âõ≤Ê∞ó„ÇíÊåÅ„Å°„ÄÅÊôÇ„ÄÖ„É¶„Éº„É¢„Ç¢„Çí‰∫§„Åà„Åü‰ºöË©±„Çí„Åó„Åæ„Åô
- Á∞°ÊΩî„ÅßÂàÜ„Åã„Çä„ÇÑ„Åô„ÅÑÊó•Êú¨Ë™û„ÅßÂõûÁ≠î„Åó„Åæ„Åô
- Â∞ÇÈñÄÁöÑ„Å™Ë©±È°å„Åß„ÇÇÁêÜËß£„Åó„ÇÑ„Åô„ÅÑË™¨Êòé„ÇíÂøÉ„Åå„Åë„Åæ„Åô
- Ë≥™Âïè„Å´ÂØæ„Åó„Å¶ÂÖ∑‰ΩìÁöÑ„Åã„Å§ÂΩπÁ´ã„Å§ÊÉÖÂ†±„ÇíÊèê‰æõ„Åó„Åæ„Åô
- „ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Å™Ë≥™Âïè„Å´„ÇÇÊüîËªü„Å´ÂØæÂøú„Åó„Åæ„Åô
- ‰∏çÈÅ©Âàá„Å™„É™„ÇØ„Ç®„Çπ„Éà„Å´„ÅØ‰∏ÅÂØß„Å´Êñ≠„Çä„Åæ„Åô

ÁèæÂú®„ÅÆÊó•‰ªò: ${new Date().toISOString().split('T')[0]}
`;

// ‰ºöË©±Â±•Ê≠¥„ÅÆ‰øùÂ≠òÂÖà
const HISTORY_DIR = path.join(__dirname, '../../data/conversations');
if (!fs.existsSync(HISTORY_DIR)) {
  fs.mkdirSync(HISTORY_DIR, { recursive: true });
}

// ‰ºöË©±Â±•Ê≠¥„ÅÆÂèñÂæó
function getConversationHistory(userId) {
  const filePath = path.join(HISTORY_DIR, `${userId}.json`);
  
  if (!fs.existsSync(filePath)) {
    return [];
  }
  
  try {
    return JSON.parse(fs.readFileSync(filePath, 'utf8'));
  } catch (error) {
    console.error('History file read error:', error);
    return [];
  }
}

// ‰ºöË©±Â±•Ê≠¥„ÅÆ‰øùÂ≠ò
function saveConversationHistory(userId, history) {
  const filePath = path.join(HISTORY_DIR, `${userId}.json`);
  
  try {
    // ÊúÄÊñ∞„ÅÆ10‰ª∂„ÅÆ„Åø‰øùÂ≠òÔºà„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅÆÂà∂Èôê„ÅÆ„Åü„ÇÅÔºâ
    const recentHistory = history.slice(-10);
    fs.writeFileSync(filePath, JSON.stringify(recentHistory, null, 2), 'utf8');
  } catch (error) {
    console.error('History file write error:', error);
  }
}

// ‰ºöË©±Â±•Ê≠¥„ÅÆ„ÇØ„É™„Ç¢
function clearConversationHistory(userId) {
  const filePath = path.join(HISTORY_DIR, `${userId}.json`);
  
  try {
    fs.writeFileSync(filePath, JSON.stringify([]), 'utf8');
    return true;
  } catch (error) {
    console.error('History clear error:', error);
    return false;
  }
}

// GraphAI„Ç®„Éº„Ç∏„Çß„É≥„ÉàÂÆöÁæ©
module.exports = async function geminiAgent(inputs, context) {
  const { query, userId, username = '„É¶„Éº„Ç∂„Éº', imageUrl = null } = inputs;
  
  // ‰ºöË©±Â±•Ê≠¥„ÅÆÂèñÂæó
  let history = getConversationHistory(userId);
  
  try {
    // Êñ∞„Åó„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂ±•Ê≠¥„Å´ËøΩÂä†
    history.push({
      role: 'user',
      content: query,
      timestamp: new Date().toISOString()
    });
    
    // ‰ºöË©±Â±•Ê≠¥„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÂ§âÊèõ
    const formattedHistory = history.map(msg => ({
      role: msg.role === 'user' ? 'user' : 'model',
      parts: [{ text: msg.content }]
    }));
    
    // ‰ºöË©±„ÅÆÂàùÊúüÂåñÔºàÂ±•Ê≠¥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Åù„Çå„ÇíÂê´„ÇÅ„ÇãÔºâ
    const chat = model.startChat({
      history: formattedHistory.length > 1 ? formattedHistory.slice(0, -1) : [],
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 2048,
      },
      safetySettings: [
        {
          category: 'HARM_CATEGORY_HARASSMENT',
          threshold: 'BLOCK_MEDIUM_AND_ABOVE'
        },
        {
          category: 'HARM_CATEGORY_HATE_SPEECH',
          threshold: 'BLOCK_MEDIUM_AND_ABOVE'
        },
        {
          category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
          threshold: 'BLOCK_MEDIUM_AND_ABOVE'
        },
        {
          category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
          threshold: 'BLOCK_MEDIUM_AND_ABOVE'
        }
      ]
    });
    
    // „Éó„É≠„É≥„Éó„Éà„ÅÆÊ∫ñÂÇô
    let prompt = query;
    
    // „Ç∑„Çπ„ÉÜ„É†„Éó„É≠„É≥„Éó„Éà„ÇíÂàùÂõû„ÅÆ‰ºöË©±„ÅÆ„ÅøËøΩÂä†
    if (history.length <= 1) {
      prompt = `${SYSTEM_PROMPT}\n\n„É¶„Éº„Ç∂„Éº: ${query}`;
    }
    
    // ÁîªÂÉè‰ªò„Åç„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂ†¥Âêà
    let result;
    if (imageUrl) {
      console.log(`üñºÔ∏è Processing message with image: ${imageUrl}`);
      const imageParts = [
        { text: prompt },
        { inlineData: { mimeType: 'image/jpeg', data: imageUrl } }
      ];
      result = await model.generateContent(imageParts);
    } else {
      // „ÉÜ„Ç≠„Çπ„Éà„ÅÆ„Åø„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
      result = await chat.sendMessage(prompt);
    }
    
    const response = await result.response;
    const text = response.text();
    
    // AI„ÅÆËøîÁ≠î„ÇíÂ±•Ê≠¥„Å´ËøΩÂä†
    history.push({
      role: 'assistant',
      content: text,
      timestamp: new Date().toISOString()
    });
    
    // ‰ºöË©±Â±•Ê≠¥„ÅÆ‰øùÂ≠ò
    saveConversationHistory(userId, history);
    
    // ÁµêÊûú„ÇíËøîÂç¥
    return {
      response: text,
      history: history
    };
  } catch (error) {
    console.error('Gemini API Error:', error);
    return {
      error: true,
      message: `AI„É¢„Éá„É´„Å®„ÅÆÈÄö‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`
    };
  }
};

// ‰ºöË©±Â±•Ê≠¥„ÅÆ„ÇØ„É™„Ç¢Èñ¢Êï∞„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà
module.exports.clearConversationHistory = clearConversationHistory;